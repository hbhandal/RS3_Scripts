{$DEFINE SMART}
{$i AeroLib/AeroLib.Simba}
{$i Reflection/Reflection.Simba}
var
locplayer: TReflectLocalPlayer;
_item : TReflectInvItem;
x,y : integer;


procedure setupScriptVars;
begin
  Me.Active := true;
  Me.Name := 'Username'; // Enter the account email here
  Me.Pass := 'Password';  // Enter the account password here
  Me.Member    := True;
end;

 function R_TileOnMS(Tile : TPoint; var OutputPoint : TPoint; x : integer = 0; y : integer = 0; z : integer = 0):boolean;
var tempB : TBox;
begin
  OutputPoint := TReflectionTiles.TileToMS(Tile, x, y, z);
  tempB := intToBox(MSX1, MSY1, MSX2, MSY2);
  result := PointInBox(OutputPoint, tempB);
end;

procedure randomMouseInput(pnt:Tpoint; ranx, rany:integer);
begin
  case random(3) of
    0:humanMMouse(pnt, ranx, rany);
    1:missMouse(pnt, ranx, rany);
    2:mouse(pnt, ranx, rany, mouse_move);
  end;
end;

function R_InteractTile(tile:Tpoint; action:string; x:integer = 0; y:integer = 0; z:integer = 0):boolean;
var RSTile : TPoint;
begin
 If Not R_TileOnMS(Tile, RSTile, x, y, z) then
  begin
    locPlayer.WalkToTileMM(Tile);
    Wait(250+Random(200));
    FFlag(0);
    Exit;
  end;
  if R_TileOnMS(Tile, RSTile, x, y, z) then begin
    randomMouseInput(rsTile, 3, 3);
    if(Reflect.Text.IsUpText(action)) then begin
      FastClick(mouse_left);
      result := didClick(true, 1000);
    end else begin
      if TReflectionText.OptionExists(action) then begin
        FastClick(mouse_right);
        result := Reflect.Text.ChooseOption(action);
      end;
      if not result then
        randomMouseInput(Point(MSCX, MSCY), 500, 500);
    end;
  end;
end;

Procedure getTile;
var
  OurTile   : TPoint;
begin
  OurTile := Reflect.Tiles.GetGlobalTile;
  writeln('Point('+ IntToStr(OurTile.x) + ',' + IntToStr(OurTile.y) +')');
end;

function dismissAllRandoms : boolean;
var i, j, me_indice:integer;
    _npcs:TReflectNPCArray;
    randoms:tstringarray;
begin
  randoms := ['dunce', 'molly', 'niles', 'miles', 'giles', 'sandwich lady',
  'drunken dwarf', 'highwayman', 'dr jekyll', 'cap''n hand', 'security guard',
  'rick turpentine', 'mysterious old man', 'frog', 'null', 'mime', 'sergeant damien', 'freaky forester','strange plant',
   'postie pete', 'tilt', 'flippa', 'leo', 'pillory guard', 'evil bob'];
  _npcs.GetAll;
  me_indice := TReflectLocalPlayer.GetPlayerIndex;
  for i:=0 to high(_npcs) do begin
    if (_npcs[i].getInteractingIndex = me_indice) then begin
      for j:=0 to high(randoms) do begin
        if (pos(randoms[j], lowercase(_npcs[i].getName)) > 0) then begin
          if R_InteractTile(_npcs[i].getTile, 'Dismiss', 0, 0, 50) then begin
            FFlag(0);
            sleep(500+random(2000));
            writeln('Dismissed random: '+_npcs[i].getname+'  Time Running: '+TimeRunning);
            result := True;
          end;
        end;
      end;
    end;
  end;
end;
procedure AntiBannned;
begin
  case random(750) of
    1:HoverSkill('random', False);
    2:hoverSkill('random', false);
    4:SleepAndMoveMouse(random(2500));
    5:randomMovement;
    6:compassMovement(0, 360, false);
    7:boredHuman;
    8:sleep(500+random(5000));
    9:randomFKeys(false);
    10:randomTab(false);
    11:checkMovingObjs(false);
    12:checkMovingObjs(false);
    13:MMouseOffClient('rand');
    14:MMouseOffClient('top');
    15:MMouseOffClient('bottom');
    16:MMouseOffClient('left');
    17:MMouseOffClient('right');
    18:HoverSkill('random', False);
  end;
end;
procedure antiban();
begin
 case random(1000) of
      155..390:humanRandomMouse();
      455..490: MMouseOffClient('top');
      555..580: MMouseOffClient('right');
      655..680: MMouseOffClient('left');
      355..370: MMouseOffClient('rand');
    end;
end;
Function waitMove(c: Integer): boolean;
var
d : integer;
Begin
dismissAllRandoms;
FFlag(0);
(d = (c/5));
wait(c+random(d));
while locPlayer.IsAnimating or locPlayer.IsMoving do
wait(c-random(d));
end;

Function R_Click(textstr : string): boolean;
begin
  FastClick(Mouse_Right);
  if ChooseOption(textstr) then begin
  FFlag(0);
  result := true;
end else
  result := false;
end;

Function OpenBank :boolean;
  var
    Bank: TReflectObject;
begin
   waitMove(300);
   if TReflectionBank.IsOpen then begin exit; end;
  FFlag(0);
  if  Bank.Find(objGame, 'Banker', 10) then begin
    Reflect.Mouse.Move(Bank.GetMSPoint, 3, 3);
     wait(100+random(500));
    R_Click('Bank Banker');
    FFlag(0);
 end
 if TReflectionBank.IsOpen then
 begin
 result := true
 end else
 result := true;
end;

procedure Deposit;
var
_items : TReflectInvItemArray;
 h : integer;
   tali :TIntegerArray;
begin
  waitMove(100);
  if not TReflectionBank.IsOpen then begin
  exit;
  end;
   FFlag(0);
   begin
   quickDeposit('inv');
   end;
end;

procedure WithdrawItems(item: String; amount: Integer; Result: Boolean);
var
  iitem: TReflectBankItem;
  invItem: TReflectInvItem;
begin
    if iitem.Find(item) then begin
    waitMove(250);
      iitem.Withdraw(amount);
      result := true;
    end else if not invItem.Find(item) then begin
     logoutPlayer;
     terminatescript;
     result := false;
     end;
end

function withDraw: Boolean;

begin
  if TReflectionBank.IsOpen then begin
    begin
    if not _item.Find('Shark') then
      WithdrawItems('Shark', 5, true);
      Result := true;
     end;
     Reflect.Bank.Close;
end;
end;

function findMaster: boolean;
var
  NPCs: TReflectNPCArray;
  I: Integer;
begin
Wait(100+Random(1000));
  NPCs.Get('Master Farmer');
  For I:=0 to High(NPCs)do
    If (NPCs[I].GetInteractingIndex = -1)and(NPCs[I].GetMaxHealth = 0) then
    begin
      Result := R_InteractTile(NPCs[I].GetTile, 'Pickpocket Master Farmer', mouse_Right);
      antiban();
      Exit;
    end;
end;

function Banker: boolean;
var
  NPCs: TReflectNPCArray;
  I: Integer;
begin
Wait(100+Random(1000));
  NPCs.Get('Banker');
  For I:=0 to High(NPCs)do
    begin
      Result := R_InteractTile(NPCs[I].GetTile, 'Bank Banker', mouse_Right);
      antiban();
      Exit;
    end;
end;

Procedure Eat;
    begin
  if _item.Find('Shark') then
  if interactSlot(_item.getInvSlot, mouse_left) then
  wait(2000); end;

Procedure WalkBank;
begin
if Reflect.Tiles.DistanceFromTile(Point(3092,3244)) < 3 then begin exit; end;
locPlayer.BlindWalkMM (Point(3092+RandomRange(0, 2),3244+RandomRange(0, 2)),2);
end;

Procedure WalkToo
begin
if Reflect.Tiles.DistanceFromTile(Point(3081,3249)) < 10 then begin exit; end;
locPlayer.BlindWalkMM (Point(3081+RandomRange(0, 2),3249+RandomRange(0, 2)),2);
end;

procedure Main;
begin
  while not (Reflect.Inv.IsFull) and _item.Find('Shark') and not locplayer.IsUnderAttack do begin
    if getCurrentHealth() < (50+random(20)) then begin eat; end;
    if Reflect.Chat.Find('been stunned') and findcolortolerance(x, y, 1485493, 238, 130, 271, 161, 48) then begin

    writeln('Stunned');
    wait(500+random(500));
    exit;
    end;
    If findmaster then begin
    if locPlayer.IsAnimating or locPlayer.IsMoving then begin wait(50) end;
    wait(1800+random(1200));
     end
    end;
  while (Reflect.Inv.IsFull) or not _item.Find('Shark') do begin
    WalkBank;
    Banker;
    Deposit;
    Withdraw;
    if _item.Find('Shark') then exit;
    end;
    end;

begin
  initAL;
  Reflect.Setup;
  setupScriptVars;
  locPlayer.Create;
  if not isLoggedIn() then
  if loginPlayer(false) then
     setCompass('Random');
   setAngle(ANGLE_HIGH);
  begin
  repeat
 Main();
 until (false);
end
end;
